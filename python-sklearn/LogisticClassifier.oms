// generate basic binary data with the modified fire model
val forest_density = Val[Double]
val tree_resistance = Val[Double]
val replication = Val[Int]

val burnt = Val[Double]
val binaryburnt = Val[Double]

val errdensity = Val[Array[Double]]
val errresistance = Val[Array[Double]]
val score = Val[Double]

// Python task to embed the ABM model we wish to explore
val simmodel = PythonTask(workDirectory / "fire.py",libraries=Seq("numpy")
  ) set (
    (inputs,outputs) += (forest_density,tree_resistance,replication),
    inputs += forest_density mapped "forest_density",
    inputs += tree_resistance mapped "tree_resistance",
    inputs += replication mapped "seed",
    outputs += burnt mapped "burnt",
    outputs += binaryburnt mapped "binaryburnt"
  )


// Exploration task: DirectSampling. Input: model to evaluate, output: instances of model variables aggregated arrays to map onto the analysis script.
val sampler = DirectSampling(
    evaluation = simmodel,
    sampling =
      ((forest_density in (0.1 to 0.9 by 0.2)) x
       (tree_resistance in (0.1 to 0.9 by 0.2)) x
       (replication in (UniformDistribution[Int](max = 100000) take 5)))
  )

// Python task to embed the machine learning analysis used to evaluate the behavior of the computationnal model
//  (surrogate logistic regression model)
val sklearnclassifier = PythonTask(
    workDirectory / "logisticregression.py",
    libraries = Seq("pandas","numpy","scikit-learn")
) set (
    inputs += forest_density.array mapped "forest_density_array",
    inputs += tree_resistance.array mapped "tree_resistance_array",
    inputs += binaryburnt.array mapped "binaryburnt_array",
    outputs += errdensity mapped "errdensity",
    outputs += errresistance mapped "errresistance",
    outputs += score mapped "score"
) hook (workDirectory / "classiferrors.csv")


// Workflow: exploration to sklearn analysis transition
//(">-" aggregates the sampling as arrays for the sklearnclassifier task, where inputs arrays are retrieved using the ".array" function of prototypes)
sampler >- sklearnclassifier

