val numAgents = Val[Double]
val topology = Val[String]
val strengthOfDilemma = Val[Double]
val inicoop = Val[Double]
val replacement = Val[Boolean]
val culturalConstant = Val[Double]
val loadtopology = Val[Boolean]
val filein = Val[String]
val seed =  Val[Int]
val connectionProbability = Val[Double]
val initialNeighbours = Val[Double]
val rewiringProbability = Val[Double]
val initialRandomTypes = Val[Boolean]
val initialMaxi = Val[Double]
val initialMini = Val[Double]
val initialConf = Val[Double]

val graph = Val[File]
val coop =  Val[File]
val popul = Val[File]
val ages =  Val[File]


val cmds = List(
  "random-seed ${seed}",
  "run-to-grid 1000",
  "export-graph",
  "export-coop",
  "export-prop",
  "export-ages"
)
  
val model = 
  NetLogo5Task(workDirectory / "model" / "OM_Metamimetic_Networks_GIT.nlogo", cmds, embedWorkspace = true) set (
    inputs += seed,
    topology := "Small-World",
    numAgents := 100.0,
    connectionProbability := 1.0,
    filein := "SW1000", 
    initialRandomTypes := true,
    culturalConstant := 3.0,
    initialMaxi := 0,
    initialMini := 0,
    initialConf := 0,
    replacement := false,
    loadtopology := false,
    inputs += (filein mapped "FileIn"),
    inputs += (topology mapped "Topology"),
    inputs += (numAgents mapped "Num-Agents"),
    inputs += (connectionProbability mapped "Connection-Probability"),
    inputs += (initialNeighbours mapped "Initial-Neighbours"),
    inputs += (rewiringProbability mapped "Rewiring-Probability"),
    inputs += (initialRandomTypes mapped "Initial-Random-Types?"),
    inputs += (initialMaxi mapped "Initial-Maxi-%"),
    inputs += (initialMini mapped "Initial-Mini-%"),
    inputs += (initialConf mapped "Initial-Conf-%"),
    inputs += (strengthOfDilemma mapped "Strength-of-Dilemma"),
    inputs += (inicoop mapped "inicoop"),
    inputs += (replacement mapped "replacement?"),
    inputs += (culturalConstant mapped "cultural-constant"),
    inputs += (loadtopology mapped "Load-Topology?"),    
    outputFiles += ("graph.graphml", graph),
    outputFiles += ("popul.csv", popul),
    outputFiles += ("coop.csv", coop),
    outputFiles += ("ages.csv", ages),
    outputs += (rewiringProbability, inicoop, seed, strengthOfDilemma, culturalConstant , initialNeighbours, filein)
  )
  

val fileHook = CopyFileHook(graph, workDirectory / "output/graphs/graph_${rewiringProbability}_${inicoop}_${seed}_${strengthOfDilemma}_${culturalConstant}_${initialNeighbours}_${filein}.graphml" )

val populHook = CopyFileHook(popul, workDirectory / "output/plots/popul/popul_${rewiringProbability}_${inicoop}_${seed}_${strengthOfDilemma}_${culturalConstant}_${initialNeighbours}_${filein}.csv" )

val coopHook = CopyFileHook(coop, workDirectory / "output/plots/coop/coop_${rewiringProbability}_${inicoop}_${seed}_${strengthOfDilemma}_${culturalConstant}_${initialNeighbours}_${filein}.csv" )

val agesHook = CopyFileHook(ages, workDirectory / "output/plots/ages/ages_${rewiringProbability}_${inicoop}_${seed}_${strengthOfDilemma}_${culturalConstant}_${initialNeighbours}_${filein}.csv" )


DirectSampling (
  evaluation = model hook (fileHook , populHook , coopHook, agesHook),
  sampling = 
    (seed in (UniformDistribution[Int]() take 50 )) x
      SobolSampling (
        sample = 200,
        factor = Seq(
          rewiringProbability in (0.0 , 1.0),
          strengthOfDilemma in (0.00, 0.50),
          initialNeighbours in (8.0 , 90.0),      
          inicoop in (0.0, 100.0))
      )
 )



