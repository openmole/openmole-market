import _file_.Model._

val aggregatedFitness = Val[Double]

val agg = 
  ScalaTask("""
    |val normalised = Seq(ksValue, deltaPop, deltaTime)
    |val aggregatedFitness = if(normalised.exists(_.isNaN)) Double.PositiveInfinity else normalised.max""".stripMargin) set (
    inputs += (ksValue, deltaPop, deltaTime),
    outputs += aggregatedFitness
  )

val grid = EGIEnvironment("vo.complex-systems.eu")

def profile(variable: Val[Double]) = {  
  
  val algo =
    ProfileEvolution (
      profile = Seq(variable in 100),
      genome = Seq(
        rMax in (2.0, 50000.0),
        distanceDecay in (0.0, 4.0),
        pCreation in (0.0, 0.01),
        pDiffusion in (0.0, 0.01),
        innovationImpact in (0.0, 2.0),
        innovationLife in (1.0, 4001.0)
      ),
      objective = Seq(aggregatedFitness),
      stochastic = Stochastic(seed = seed),
      evaluation =  evaluateModel -- agg,
      distribution = Island(5 minutes),
      parallelism = 1000, 
      termination = 200000
    ) hook (workDirectory / s"profile2/${variable.name}/")

  algo on grid
}

val profiles = Seq(rMax, distanceDecay, pCreation, pDiffusion, innovationImpact, innovationLife).map(profile)

EmptyTask() -- profiles

