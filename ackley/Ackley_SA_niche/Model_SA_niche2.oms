//Parameters to tune for the Simulated Annealing
val T0 = Val[Double]          //Initiale temperature
val cexp = Val[Double]        //Coefficient for exponential decrease of temperature
val pas = Val[Double]         //Size of a step along x and y dimensions
val niter = Val[Double]       //Number of iteration of the algorithm

//Parameters of the Ackley function. By tunning them, one may vary the problem on which NSGA2 will be working
val a = Val[Double]
val b = Val[Double]
val c = Val[Double]

val seed = Val[Int]

//Here we will catch the output of the careTask. We choose to not do replications here in order to go
//straight to the point : the NicheNSGA2 algorithm but one may add this feature with the help of the Ackley_SA.oms file.
val strValue = Val[String]
val doubleValue = Val[Double]

//This Task contains a SA algorithm runned on the Ackley function parametrized by (a, b, c)
val AckleyFunction =
PythonTask( workDirectory / "Ackley_SA_niche.py", arguments = "${T0} ${cexp} ${pas} ${niter} ${a} ${b} ${c} ${abs(seed)}", stdOut = strValue, libraries = Seq("numpy")) set (
  inputs += (T0, cexp, pas, niter, a, b, c, seed),      //These inputs are the same as the inputs of the python script
  outputs += (T0, cexp, pas, niter, strValue)    //Only strValue is mandatory as output, the others are for debug
)

//This Task convert the output of the CARETask (a string) into a double
val toDouble = ScalaTask("val doubleValue = strValue.toDouble") set (
  inputs += strValue,
  outputs += doubleValue
)

//This is a continuous version of the NichedNSGA algorithm
NichedNSGA2Evolution(
  //Size of the population
  nicheSize = 20, 
  //Space in which the population is sampled
  genome = Seq(
    T0 in (0.0, 3.0),          //genotype
    cexp in (0.5, 1.0),        //genotype
    pas in (0.1, 5.0),         //genotype
    niter in (100.0, 10000.0), //genotype
    a in (0.0, 40.0),          //niche
    b in (0.0, 2.0),           //niche
    c in (0.0, 6.28)           //niche
  ),
  //Specify the niches, with three possible syntaxes :
  // (a, 4) means that the interval of a is divided in 4 equal segment.
  // (a in (0.0 to 10.0 by 1.0)) gives 10 equal segment
  // (a in Vector(0.0, 2.0, 5.0, 10.0))  gives 4 segment of different sizes
  niche = Seq((a, 4), (b, 4), (c, 4)),
  //Specify the objective(s)
  objective = Seq(doubleValue evaluate median),
  stochastic = Stochastic(seed = seed),
  evaluation = AckleyFunction -- toDouble,
  parallelism = 10,
  termination = 2000
) hook (workDirectory / "evolution_niche2", frequency = 100)

