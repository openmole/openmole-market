// Define the variables that are transmitted between the tasks
val seed = Val[Long]
val pi = Val[Double]
val piAvg = Val[Double]

// Define the model task that computes an estimation of pi
val model =
  ScalaTask("""
    |val random = newRNG(seed)
    |val points = 100000
    |val inside = 
    |  for {
    |    i <- (0 until points).toIterator
    |    x = random.nextDouble()
    |    y = random.nextDouble()
    |  } yield { (x * x) + (y * y) }
    |val pi = (inside.count(_ < 1).toDouble / points) * 4
    |""".stripMargin) set (
      inputs += seed,
      outputs += pi
    )
    
// Define the execution environment, here it is a local execution environment with 4 threads
val env = LocalEnvironment(4)

val exploration = 
  Replication(
    evaluation = model,
    seed = seed,
    sample = 100,
    aggregation = Seq(pi evaluate average)
  ) hook display on env 

exploration 


