
// Define the input variables
val gPopulation = Val[Double]
val gDiffusionRate = Val[Double]
val gEvaporationRate = Val[Double]

// Define the output variables
val food1 = Val[Double]
val food2 = Val[Double]
val food3 = Val[Double]

val obj = Val[Double]
val seed = Val[Int]

// Define the NetlogoTask
val cmds = Seq("run-to-grid")

val ants =
  NetLogo6Task(workDirectory / "ants.nlogo", cmds, seed = seed) set (
    // Map the OpenMOLE variables to NetLogo variables
    inputs += gPopulation mapped "gpopulation",
    inputs += gDiffusionRate mapped "gdiffusion-rate",
    inputs += gEvaporationRate mapped "gevaporation-rate",
    outputs += food1 mapped "final-ticks-food1",
    outputs += food2 mapped "final-ticks-food2",
    outputs += food3 mapped "final-ticks-food3",
    gPopulation := 100
  )

val agg =
  ScalaTask("val obj = math.abs(250 - food1) + math.abs(400 - food2) + math.abs(800 - food3)") set (
    inputs += (food1, food2, food3),
    outputs += obj
  )


val evolution =
  NSGA2Evolution(
    genome = Seq(gDiffusionRate in (0.0, 99.0), gEvaporationRate in (0.0, 99.0)),
    objective = Seq(obj),
    stochastic = Stochastic(seed = seed),
    evaluation = ants -- agg,
    parallelism = 10,
    termination = 10000
  ) hook (workDirectory / "calibration")

val env = LocalEnvironment(4)

// Plug everything together to create the workflow
evolution on env
