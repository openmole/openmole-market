import _file_.plottingFunctions._
import _file_.execEnvironment._

//model inputs
val x = Val[Double]

//model outputs
val f1 = Val[Double]
val f2 = Val[Double]

// explored space
val A = 1000.0 // up to 10^5

// about the current experiment
val relativePath = "results/SchafferN1"

// the test function 
val testFunctionSchafferN1 =
    ScalaTask("""
        val f1 = Math.pow(x, 2);
        val f2 = Math.pow(x - 2, 2);        
        """) set (
    inputs += x,
    outputs += f1,
    outputs += f2
    )
    
// the optimisation algorithm under test 
val evolutionSchafferN1 =
  NSGA2Evolution(
    genome = Seq(
      x in (-A, A)
    ),
    objective = Seq(f1, f2),
    evaluation = testFunctionSchafferN1, 
    parallelism = threads * 2,
    termination = 1000
  )
  
// compute evolution on the test Function
(evolutionSchafferN1 on envMultiThread hook (workDirectory/relativePath)
// then plot the last Pareto front
) -- (taskPlotLastParetoFront set ( directoryWithResults := workDirectory/relativePath, countInputs := 1) hook CopyFileHook(last_pareto, workDirectory/"last Pareto front SchafferN1.png" ) )
