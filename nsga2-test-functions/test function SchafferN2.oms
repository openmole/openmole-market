import _file_.plottingFunctions._
import _file_.execEnvironment._

//model inputs
val x = Val[Double]

//model outputs
val f1 = Val[Double]
val f2 = Val[Double]

// about the current experiment
val relativePath = "results/SchafferN2"

// the test function 
val testFunctionSchafferN2=
    ScalaTask("""
        val f1 = if (x <= 1) {
            -x*1.0
        } else if (x <= 3) {
            x - 2.0
        } else if (x <= 4) {
            4.0 - x
        } else {
            x - 4.0
        }
        val f2 = Math.pow(x - 5, 2);        
        """) set (
    inputs += x,
    outputs += f1,
    outputs += f2
    )
    
// the optimisation algorithm under test 
val evolutionSchafferN2 =
  NSGA2Evolution(
    genome = Seq(
      x in (-5.0, 10.0)
    ),
    objective = Seq(f1, f2),
    evaluation = testFunctionSchafferN2, 
    parallelism = threads * 2,
    termination = 1000
  )
  
// compute evolution on the test Function
(evolutionSchafferN2 on envMultiThread hook SavePopulationHook(evolutionSchafferN2, workDirectory/relativePath)
// then plot the last Pareto front
) -- (taskPlotLastParetoFront set ( directoryWithResults := workDirectory/relativePath, countInputs := 1) hook CopyFileHook(last_pareto, workDirectory/"last Pareto front SchafferN2.png" ) )
